1.Spring有哪些优点？
【轻量级】：Spring在大小和透明性方面绝对属于轻量级，基础版本的Spring框架大约只有2MB。
【控制反转(IOC)】：使用控制反转实现了松耦合。依赖被注入到对象，而不是创建或寻找依赖对象。
【面向切面(AOP)】：支持面向切面编程，同时把业务逻辑和系统服务分离开。
【容器】：包含并管理应用对象程序对象的配置和生命周期。
【事务管理】：对下至本地上至全局业务(JAT)提供了统一的事务管理接口。

2.Spring事务实现方式
·编程式事务管理：通过编程的方式管理事务。带来了很大的灵活性，但很难维护。
·声明式事务管理：可以将事务管理和业务代码分离，只需要通过注解或者XML配置管理事务。

3.Spring MVC运行流程
Step1：发起请求到前端控制器(DispatcherServlet)。
Step2：前端控制器请求HandlerMapping查找Handler(根据XML配置、注解进行查找)。
Step3：处理器映射器HandlerMapping向前端控制器返回Handler。
Step4：前端控制器调用处理器适配器去执行Handler。
Step5：处理器适配器去执行Handler。
Step6：Handler执行完成给适配器返回ModelAndView。
Step7：处理器适配器向前端控制器返回ModelAndView(ModelAndView是SpringMVC的一个底层对象，包括Model和view)。
Step8：前端控制器请求视图解析器进行视图解析(根据逻辑视图名解析成真正的视图(jsp))。
Step9：视图解析器向前端控制器返回View。
Step10：前端控制器进行视图渲染(视图渲染将模型数据(保存在ModelAndView中)填充到request域)。
Step11：前端控制器向用户响应结果。

4.什么是Spring Bean？
Spring Bean是构成Spring应用核心的Java对象。这些对象由Spring IOC容器实例化、组装、管理。这些对象通过容器中配置的元数据创建，例如使用XML文件中的定义。
在<bean>标签中有一个属性为"singleton"，如果设为true，则该bean是单例的，如果设为false，该bean是原型bean。
Singleton属性默认值问true，因此，Spring框架中的所有bean都默认为单例bean。

5.说一下Spring中支持的bean作用域
Spring框架支持以下5种不同的作用域：
·singleton：在Spring IOC容器中仅存在一个bean实例，bean以单实例的方式存在。
·prototype：一个bean可以定义多个实例。
·request：每次HTTP请求都会创建一个新的bean。该作用域仅适用于WebApplicationContext环境。
·session：一个HTTP Session定义一个bean。该作用域仅适用于WebApplicationContext环境。
·globalSession：同一个全局HTTP Session定义一个bean。该作用域同样仅适用于WebApplicationContext环境。
bean默认的scope属性值为"singleton"。

6.Spring的单例实现原理
Spring框架对单例的支持是采用单例注册表的方式进行实现的，而这个注册表的缓存是HashMap对象。
如果配置文件种的配置信息不要求使用单例，Spring会采用新建实例的方式返回对象实例。

7.解释Spring框架中bean的生命周期
ApplicationContext容器中，bean的生命周期流程大致如下：
Step1：容器启动，对scope为singleton且非懒加载的bean进行实例化。
Step2：按照bean定义信息配置信息，注入所有的属性。
Step3：如果bean实现了BeanNameAware接口，回调该接口的setBeanName()方法，传入该bean的id，此时该bean就获得了自己在配置文件中的id。
Step4：如果bean实现了BeanFactoryAware接口，回调该接口的setBeanFactory()方法，传入该bean的beanFactory，这样该bean就获得了自己所在的beanFactory。
Step5：如果bean实现了ApplicationContextAware接口，回调该接口的setApplicationContext()方法，传入该bean的ApplicationContext，这样该bean就获得了自己所在的ApplicationContext。
Step6：如果有bean实现了BeanPostProcessor接口，则会回调该接口的postProcessBeforeInitialzation()方法。
Step7：如果bean实现了InitializingBean接口，则会回调该接口的afterPropertiesSet()方法。
Step8：如果bean配置了init-method方法，则会执行init-method配置的方法。
Step9：如果有bean实现了BeanPostProcessor接口，则会回调该接口的postProcessAfterInitialzation()方法。
Step10：经过以上9步后，就可以正式使用该bean了。
	对于scope为singleton的bean，Spring的IOC容器中会缓存一份该bean的实例。
	而对于scope为prototype的bean，每次被调用都会new一个新的对象，其生命周期将交给调用方管理，不再是Spring容器进行管理。
...容器运行...
Step11：容器关闭后，如果bean实现了DisposableBean接口，则会回调该接口的destroy()方法。
Step12：如果bean配置了destroy-method方法，则会执行destroy-method配置的方法。
至此，整个bean的生命周期结束。